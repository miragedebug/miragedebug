// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: app/app.proto

package app

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkloadType int32

const (
	WorkloadType_WORKLOAD_TYPE_UNSPECIFIED WorkloadType = 0
	WorkloadType_DEPLOYMENT                WorkloadType = 1
	WorkloadType_DAEMONSET                 WorkloadType = 2
)

// Enum value maps for WorkloadType.
var (
	WorkloadType_name = map[int32]string{
		0: "WORKLOAD_TYPE_UNSPECIFIED",
		1: "DEPLOYMENT",
		2: "DAEMONSET",
	}
	WorkloadType_value = map[string]int32{
		"WORKLOAD_TYPE_UNSPECIFIED": 0,
		"DEPLOYMENT":                1,
		"DAEMONSET":                 2,
	}
)

func (x WorkloadType) Enum() *WorkloadType {
	p := new(WorkloadType)
	*p = x
	return p
}

func (x WorkloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_app_proto_enumTypes[0].Descriptor()
}

func (WorkloadType) Type() protoreflect.EnumType {
	return &file_app_app_proto_enumTypes[0]
}

func (x WorkloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadType.Descriptor instead.
func (WorkloadType) EnumDescriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{0}
}

type ArchType int32

const (
	ArchType_ARCH_TYPE_UNSPECIFIED ArchType = 0
	ArchType_AMD64                 ArchType = 1
	ArchType_ARM64                 ArchType = 2
)

// Enum value maps for ArchType.
var (
	ArchType_name = map[int32]string{
		0: "ARCH_TYPE_UNSPECIFIED",
		1: "AMD64",
		2: "ARM64",
	}
	ArchType_value = map[string]int32{
		"ARCH_TYPE_UNSPECIFIED": 0,
		"AMD64":                 1,
		"ARM64":                 2,
	}
)

func (x ArchType) Enum() *ArchType {
	p := new(ArchType)
	*p = x
	return p
}

func (x ArchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_app_proto_enumTypes[1].Descriptor()
}

func (ArchType) Type() protoreflect.EnumType {
	return &file_app_app_proto_enumTypes[1]
}

func (x ArchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArchType.Descriptor instead.
func (ArchType) EnumDescriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{1}
}

type DebugToolType int32

const (
	DebugToolType_DEBUG_TOOL_TYPE_UNSPECIFIED DebugToolType = 0
	DebugToolType_LOCAL                       DebugToolType = 1
	DebugToolType_REMOTE                      DebugToolType = 2
)

// Enum value maps for DebugToolType.
var (
	DebugToolType_name = map[int32]string{
		0: "DEBUG_TOOL_TYPE_UNSPECIFIED",
		1: "LOCAL",
		2: "REMOTE",
	}
	DebugToolType_value = map[string]int32{
		"DEBUG_TOOL_TYPE_UNSPECIFIED": 0,
		"LOCAL":                       1,
		"REMOTE":                      2,
	}
)

func (x DebugToolType) Enum() *DebugToolType {
	p := new(DebugToolType)
	*p = x
	return p
}

func (x DebugToolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugToolType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_app_proto_enumTypes[2].Descriptor()
}

func (DebugToolType) Type() protoreflect.EnumType {
	return &file_app_app_proto_enumTypes[2]
}

func (x DebugToolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugToolType.Descriptor instead.
func (DebugToolType) EnumDescriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{2}
}

type IDEType int32

const (
	IDEType_IDE_TYPE_UNSPECIFIED IDEType = 0
	IDEType_VS_CODE              IDEType = 1
	IDEType_GOLAND               IDEType = 2
	IDEType_CLION                IDEType = 3
)

// Enum value maps for IDEType.
var (
	IDEType_name = map[int32]string{
		0: "IDE_TYPE_UNSPECIFIED",
		1: "VS_CODE",
		2: "GOLAND",
		3: "CLION",
	}
	IDEType_value = map[string]int32{
		"IDE_TYPE_UNSPECIFIED": 0,
		"VS_CODE":              1,
		"GOLAND":               2,
		"CLION":                3,
	}
)

func (x IDEType) Enum() *IDEType {
	p := new(IDEType)
	*p = x
	return p
}

func (x IDEType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDEType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_app_proto_enumTypes[3].Descriptor()
}

func (IDEType) Type() protoreflect.EnumType {
	return &file_app_app_proto_enumTypes[3]
}

func (x IDEType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDEType.Descriptor instead.
func (IDEType) EnumDescriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{3}
}

type ProgramType int32

const (
	ProgramType_PROGRAM_TYPE_UNSPECIFIED ProgramType = 0
	ProgramType_GO                       ProgramType = 1
	ProgramType_RUST                     ProgramType = 2
)

// Enum value maps for ProgramType.
var (
	ProgramType_name = map[int32]string{
		0: "PROGRAM_TYPE_UNSPECIFIED",
		1: "GO",
		2: "RUST",
	}
	ProgramType_value = map[string]int32{
		"PROGRAM_TYPE_UNSPECIFIED": 0,
		"GO":                       1,
		"RUST":                     2,
	}
)

func (x ProgramType) Enum() *ProgramType {
	p := new(ProgramType)
	*p = x
	return p
}

func (x ProgramType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProgramType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_app_proto_enumTypes[4].Descriptor()
}

func (ProgramType) Type() protoreflect.EnumType {
	return &file_app_app_proto_enumTypes[4]
}

func (x ProgramType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProgramType.Descriptor instead.
func (ProgramType) EnumDescriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{4}
}

type RemoteRuntime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace is the namespace of the pod.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// WorkloadType is the type of workload.
	// Such as deployment, statefulset etc.
	WorkloadType WorkloadType `protobuf:"varint,2,opt,name=workloadType,proto3,enum=miragedebug.api.app.WorkloadType" json:"workloadType,omitempty"`
	// WorkloadName is the name of the workload.
	WorkloadName string `protobuf:"bytes,3,opt,name=workloadName,proto3" json:"workloadName,omitempty"`
	// ContainerName is the name of the container to debug.
	// We will select the first container or default container if not specified.
	ContainerName string `protobuf:"bytes,4,opt,name=containerName,proto3" json:"containerName,omitempty"`
	// TargetArch is the architecture of the application in the container.
	// This is used to determine the correct binary to build.
	// If your OS is amd64, but want to debug container in arm64,
	// this should be set to "arm64".
	TargetArch ArchType `protobuf:"varint,5,opt,name=targetArch,proto3,enum=miragedebug.api.app.ArchType" json:"targetArch,omitempty"`
}

func (x *RemoteRuntime) Reset() {
	*x = RemoteRuntime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_app_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteRuntime) ProtoMessage() {}

func (x *RemoteRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_app_app_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteRuntime.ProtoReflect.Descriptor instead.
func (*RemoteRuntime) Descriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{0}
}

func (x *RemoteRuntime) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RemoteRuntime) GetWorkloadType() WorkloadType {
	if x != nil {
		return x.WorkloadType
	}
	return WorkloadType_WORKLOAD_TYPE_UNSPECIFIED
}

func (x *RemoteRuntime) GetWorkloadName() string {
	if x != nil {
		return x.WorkloadName
	}
	return ""
}

func (x *RemoteRuntime) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *RemoteRuntime) GetTargetArch() ArchType {
	if x != nil {
		return x.TargetArch
	}
	return ArchType_ARCH_TYPE_UNSPECIFIED
}

// DebugToolBuilder is the interface to build debug tool.
type DebugToolBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the type of debug tool.
	// Such as local, remote
	Type DebugToolType `protobuf:"varint,1,opt,name=type,proto3,enum=miragedebug.api.app.DebugToolType" json:"type,omitempty"`
	// BuildCommands is the commands to build debug tool.
	// If Type is local, we will run these commands locally,
	// And copy LocalDest to container of RemoteConfig.DebugToolPath.
	// Else, use kubectl exec run commands in container.
	BuildCommands []string `protobuf:"bytes,2,rep,name=buildCommands,proto3" json:"buildCommands,omitempty"`
	// If Type is local, specify local debugger tool file path.
	LocalDest string `protobuf:"bytes,3,opt,name=localDest,proto3" json:"localDest,omitempty"`
}

func (x *DebugToolBuilder) Reset() {
	*x = DebugToolBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_app_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugToolBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugToolBuilder) ProtoMessage() {}

func (x *DebugToolBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_app_app_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugToolBuilder.ProtoReflect.Descriptor instead.
func (*DebugToolBuilder) Descriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{1}
}

func (x *DebugToolBuilder) GetType() DebugToolType {
	if x != nil {
		return x.Type
	}
	return DebugToolType_DEBUG_TOOL_TYPE_UNSPECIFIED
}

func (x *DebugToolBuilder) GetBuildCommands() []string {
	if x != nil {
		return x.BuildCommands
	}
	return nil
}

func (x *DebugToolBuilder) GetLocalDest() string {
	if x != nil {
		return x.LocalDest
	}
	return ""
}

type RemoteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DebugToolPath is the path of the debug tool in container.
	// Such as dlv, gdb etc.
	// empty means no debug tool installed.
	DebugToolPath string `protobuf:"bytes,1,opt,name=debugToolPath,proto3" json:"debugToolPath,omitempty"`
	// RemoteAppLocation is the location of the application in container.
	// Such as /tmp
	RemoteAppLocation string `protobuf:"bytes,2,opt,name=remoteAppLocation,proto3" json:"remoteAppLocation,omitempty"`
	// RemoteDebuggingPort is the port to use for remote debugging.
	// This is the port that the IDE will connect to.
	// This port will be both listened on the host(local) and the container,
	// make sure your local and program in the container will not listen on this
	// port.
	RemoteDebuggingPort int32 `protobuf:"varint,3,opt,name=remoteDebuggingPort,proto3" json:"remoteDebuggingPort,omitempty"`
	// CustomDebugCommand is the custom debug command to run in container.
	// Such as "dlv debug --headless --listen=:2345 --api-version=2"
	// empty means no custom debug command.
	CustomDebugCommand string `protobuf:"bytes,4,opt,name=customDebugCommand,proto3" json:"customDebugCommand,omitempty"`
	// InitialConfig is the initial config of the workload spec.
	// This is used to restore the original config after debugging.
	InitialConfig string `protobuf:"bytes,5,opt,name=initialConfig,proto3" json:"initialConfig,omitempty"`
	// NoModifyConfig indicates whether to modify the config of the workload.
	// If true, we will not modify the config of the workload.
	NoModifyConfig bool `protobuf:"varint,6,opt,name=noModifyConfig,proto3" json:"noModifyConfig,omitempty"`
}

func (x *RemoteConfig) Reset() {
	*x = RemoteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_app_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfig) ProtoMessage() {}

func (x *RemoteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_app_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfig.ProtoReflect.Descriptor instead.
func (*RemoteConfig) Descriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{2}
}

func (x *RemoteConfig) GetDebugToolPath() string {
	if x != nil {
		return x.DebugToolPath
	}
	return ""
}

func (x *RemoteConfig) GetRemoteAppLocation() string {
	if x != nil {
		return x.RemoteAppLocation
	}
	return ""
}

func (x *RemoteConfig) GetRemoteDebuggingPort() int32 {
	if x != nil {
		return x.RemoteDebuggingPort
	}
	return 0
}

func (x *RemoteConfig) GetCustomDebugCommand() string {
	if x != nil {
		return x.CustomDebugCommand
	}
	return ""
}

func (x *RemoteConfig) GetInitialConfig() string {
	if x != nil {
		return x.InitialConfig
	}
	return ""
}

func (x *RemoteConfig) GetNoModifyConfig() bool {
	if x != nil {
		return x.NoModifyConfig
	}
	return false
}

type LocalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDEType is the type of IDE to use.
	// Such as "vscode", "goland" etc.
	IdeType IDEType `protobuf:"varint,1,opt,name=ideType,proto3,enum=miragedebug.api.app.IDEType" json:"ideType,omitempty"`
	// DebugToolBuilder defines the builder of DebugTool
	DebugToolBuilder *DebugToolBuilder `protobuf:"bytes,2,opt,name=debugToolBuilder,proto3" json:"debugToolBuilder,omitempty"`
	// WorkingDir is the location of the application in local.
	// Such as /Users/kebeliu/workspace/miragedebug
	WorkingDir string `protobuf:"bytes,3,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	// AppEntryPath is the entry path of the application in local.
	// Such as ./cmd/main.go or ./cmd/
	AppEntryPath string `protobuf:"bytes,4,opt,name=appEntryPath,proto3" json:"appEntryPath,omitempty"`
	// AppArgs is the running args of the application.
	// Such as "--config=config.yaml --debug",
	AppArgs string `protobuf:"bytes,5,opt,name=appArgs,proto3" json:"appArgs,omitempty"`
	// CustomBuildCommand is the custom build command to run in local.
	// Such as "go build -o /tmp/miragedebug"
	// empty means no custom build command.
	CustomBuildCommand string `protobuf:"bytes,6,opt,name=customBuildCommand,proto3" json:"customBuildCommand,omitempty"`
	// BuildOutput is the output of the build command.
	// Such as /tmp/miragedebug
	BuildOutput string `protobuf:"bytes,7,opt,name=buildOutput,proto3" json:"buildOutput,omitempty"`
	// Metadata is the metadata of the IDE or language, such as GO version.
	Metadata map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LocalConfig) Reset() {
	*x = LocalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_app_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalConfig) ProtoMessage() {}

func (x *LocalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_app_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalConfig.ProtoReflect.Descriptor instead.
func (*LocalConfig) Descriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{3}
}

func (x *LocalConfig) GetIdeType() IDEType {
	if x != nil {
		return x.IdeType
	}
	return IDEType_IDE_TYPE_UNSPECIFIED
}

func (x *LocalConfig) GetDebugToolBuilder() *DebugToolBuilder {
	if x != nil {
		return x.DebugToolBuilder
	}
	return nil
}

func (x *LocalConfig) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *LocalConfig) GetAppEntryPath() string {
	if x != nil {
		return x.AppEntryPath
	}
	return ""
}

func (x *LocalConfig) GetAppArgs() string {
	if x != nil {
		return x.AppArgs
	}
	return ""
}

func (x *LocalConfig) GetCustomBuildCommand() string {
	if x != nil {
		return x.CustomBuildCommand
	}
	return ""
}

func (x *LocalConfig) GetBuildOutput() string {
	if x != nil {
		return x.BuildOutput
	}
	return ""
}

func (x *LocalConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ProgramType is the type of program to debug.
	// Such as go, java, python
	ProgramType ProgramType `protobuf:"varint,2,opt,name=programType,proto3,enum=miragedebug.api.app.ProgramType" json:"programType,omitempty"`
	// RemoteRuntime is the runtime to debug.
	RemoteRuntime *RemoteRuntime `protobuf:"bytes,3,opt,name=remoteRuntime,proto3" json:"remoteRuntime,omitempty"`
	// RemoteConfig is the config to debug.
	RemoteConfig *RemoteConfig `protobuf:"bytes,4,opt,name=remoteConfig,proto3" json:"remoteConfig,omitempty"`
	// LocalConfig is the config to debug.
	LocalConfig *LocalConfig `protobuf:"bytes,5,opt,name=localConfig,proto3" json:"localConfig,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_app_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_app_app_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{4}
}

func (x *App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *App) GetProgramType() ProgramType {
	if x != nil {
		return x.ProgramType
	}
	return ProgramType_PROGRAM_TYPE_UNSPECIFIED
}

func (x *App) GetRemoteRuntime() *RemoteRuntime {
	if x != nil {
		return x.RemoteRuntime
	}
	return nil
}

func (x *App) GetRemoteConfig() *RemoteConfig {
	if x != nil {
		return x.RemoteConfig
	}
	return nil
}

func (x *App) GetLocalConfig() *LocalConfig {
	if x != nil {
		return x.LocalConfig
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AppName is the name of the app.
	AppName string `protobuf:"bytes,1,opt,name=appName,proto3" json:"appName,omitempty"`
	// Configured indicates whether the app is configured(change command and
	// args).
	Configured bool `protobuf:"varint,2,opt,name=configured,proto3" json:"configured,omitempty"`
	// Connected indicates whether the port-forward is connected.
	Connected bool `protobuf:"varint,3,opt,name=connected,proto3" json:"connected,omitempty"`
	// Debugging indicates whether the app is debugging.
	Debugging bool `protobuf:"varint,4,opt,name=debugging,proto3" json:"debugging,omitempty"`
	// Error indicates the error message.
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// DebugToolPath is the path of the debug tool execute binary in container.
	// Such as /tmp/dlv-amd64
	DebugToolPath string `protobuf:"bytes,6,opt,name=debugToolPath,proto3" json:"debugToolPath,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_app_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_app_app_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{5}
}

func (x *Status) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Status) GetConfigured() bool {
	if x != nil {
		return x.Configured
	}
	return false
}

func (x *Status) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *Status) GetDebugging() bool {
	if x != nil {
		return x.Debugging
	}
	return false
}

func (x *Status) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Status) GetDebugToolPath() string {
	if x != nil {
		return x.DebugToolPath
	}
	return ""
}

type SingleAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SingleAppRequest) Reset() {
	*x = SingleAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_app_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAppRequest) ProtoMessage() {}

func (x *SingleAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_app_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAppRequest.ProtoReflect.Descriptor instead.
func (*SingleAppRequest) Descriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{6}
}

func (x *SingleAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AppList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*App `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *AppList) Reset() {
	*x = AppList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_app_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppList) ProtoMessage() {}

func (x *AppList) ProtoReflect() protoreflect.Message {
	mi := &file_app_app_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppList.ProtoReflect.Descriptor instead.
func (*AppList) Descriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{7}
}

func (x *AppList) GetApps() []*App {
	if x != nil {
		return x.Apps
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_app_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_app_app_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{8}
}

type ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Pid     int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_app_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_app_app_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfo.ProtoReflect.Descriptor instead.
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return file_app_app_proto_rawDescGZIP(), []int{9}
}

func (x *ServerInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerInfo) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

var File_app_app_proto protoreflect.FileDescriptor

var file_app_app_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfd, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67,
	0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x6f, 0x6f, 0x6c,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x65, 0x73, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x6f, 0x6f,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd1, 0x03, 0x0a, 0x0b, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x69, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x72, 0x61,
	0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x49, 0x44, 0x45, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x51, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x72,
	0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x41, 0x72,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x02, 0x0a,
	0x03, 0x41, 0x70, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0d,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xba, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x26,
	0x0a, 0x10, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x2a, 0x4c, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x02,
	0x2a, 0x3b, 0x0a, 0x08, 0x41, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4d, 0x44, 0x36, 0x34,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x4d, 0x36, 0x34, 0x10, 0x02, 0x2a, 0x47, 0x0a,
	0x0d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x07, 0x49, 0x44, 0x45, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4c, 0x41,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a,
	0x3d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x47, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55, 0x53, 0x54, 0x10, 0x02, 0x32, 0xd8,
	0x08, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x69, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e,
	0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x12, 0x18, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x1a, 0x18,
	0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x12, 0x5f, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x12, 0x18,
	0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67,
	0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x41,
	0x70, 0x70, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x1a, 0x13, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0x69, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x12,
	0x25, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x41, 0x70, 0x70,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x66, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x12, 0x25, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x76, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d,
	0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7f, 0x0a,
	0x0d, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x25,
	0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x2d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x7d,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x25, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x7a, 0x0a,
	0x0b, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x12, 0x25, 0x2e, 0x6d,
	0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x2f, 0x6d, 0x69, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_app_proto_rawDescOnce sync.Once
	file_app_app_proto_rawDescData = file_app_app_proto_rawDesc
)

func file_app_app_proto_rawDescGZIP() []byte {
	file_app_app_proto_rawDescOnce.Do(func() {
		file_app_app_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_app_proto_rawDescData)
	})
	return file_app_app_proto_rawDescData
}

var file_app_app_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_app_app_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_app_app_proto_goTypes = []interface{}{
	(WorkloadType)(0),        // 0: miragedebug.api.app.WorkloadType
	(ArchType)(0),            // 1: miragedebug.api.app.ArchType
	(DebugToolType)(0),       // 2: miragedebug.api.app.DebugToolType
	(IDEType)(0),             // 3: miragedebug.api.app.IDEType
	(ProgramType)(0),         // 4: miragedebug.api.app.ProgramType
	(*RemoteRuntime)(nil),    // 5: miragedebug.api.app.RemoteRuntime
	(*DebugToolBuilder)(nil), // 6: miragedebug.api.app.DebugToolBuilder
	(*RemoteConfig)(nil),     // 7: miragedebug.api.app.RemoteConfig
	(*LocalConfig)(nil),      // 8: miragedebug.api.app.LocalConfig
	(*App)(nil),              // 9: miragedebug.api.app.App
	(*Status)(nil),           // 10: miragedebug.api.app.Status
	(*SingleAppRequest)(nil), // 11: miragedebug.api.app.SingleAppRequest
	(*AppList)(nil),          // 12: miragedebug.api.app.AppList
	(*Empty)(nil),            // 13: miragedebug.api.app.Empty
	(*ServerInfo)(nil),       // 14: miragedebug.api.app.ServerInfo
	nil,                      // 15: miragedebug.api.app.LocalConfig.MetadataEntry
}
var file_app_app_proto_depIdxs = []int32{
	0,  // 0: miragedebug.api.app.RemoteRuntime.workloadType:type_name -> miragedebug.api.app.WorkloadType
	1,  // 1: miragedebug.api.app.RemoteRuntime.targetArch:type_name -> miragedebug.api.app.ArchType
	2,  // 2: miragedebug.api.app.DebugToolBuilder.type:type_name -> miragedebug.api.app.DebugToolType
	3,  // 3: miragedebug.api.app.LocalConfig.ideType:type_name -> miragedebug.api.app.IDEType
	6,  // 4: miragedebug.api.app.LocalConfig.debugToolBuilder:type_name -> miragedebug.api.app.DebugToolBuilder
	15, // 5: miragedebug.api.app.LocalConfig.metadata:type_name -> miragedebug.api.app.LocalConfig.MetadataEntry
	4,  // 6: miragedebug.api.app.App.programType:type_name -> miragedebug.api.app.ProgramType
	5,  // 7: miragedebug.api.app.App.remoteRuntime:type_name -> miragedebug.api.app.RemoteRuntime
	7,  // 8: miragedebug.api.app.App.remoteConfig:type_name -> miragedebug.api.app.RemoteConfig
	8,  // 9: miragedebug.api.app.App.localConfig:type_name -> miragedebug.api.app.LocalConfig
	9,  // 10: miragedebug.api.app.AppList.apps:type_name -> miragedebug.api.app.App
	13, // 11: miragedebug.api.app.AppManagement.GetServerInfo:input_type -> miragedebug.api.app.Empty
	13, // 12: miragedebug.api.app.AppManagement.ListApps:input_type -> miragedebug.api.app.Empty
	9,  // 13: miragedebug.api.app.AppManagement.CreateApp:input_type -> miragedebug.api.app.App
	9,  // 14: miragedebug.api.app.AppManagement.UpdateApp:input_type -> miragedebug.api.app.App
	11, // 15: miragedebug.api.app.AppManagement.DeleteApp:input_type -> miragedebug.api.app.SingleAppRequest
	11, // 16: miragedebug.api.app.AppManagement.GetApp:input_type -> miragedebug.api.app.SingleAppRequest
	11, // 17: miragedebug.api.app.AppManagement.GetAppStatus:input_type -> miragedebug.api.app.SingleAppRequest
	11, // 18: miragedebug.api.app.AppManagement.InitAppRemote:input_type -> miragedebug.api.app.SingleAppRequest
	11, // 19: miragedebug.api.app.AppManagement.StartDebugging:input_type -> miragedebug.api.app.SingleAppRequest
	11, // 20: miragedebug.api.app.AppManagement.RollbackApp:input_type -> miragedebug.api.app.SingleAppRequest
	14, // 21: miragedebug.api.app.AppManagement.GetServerInfo:output_type -> miragedebug.api.app.ServerInfo
	12, // 22: miragedebug.api.app.AppManagement.ListApps:output_type -> miragedebug.api.app.AppList
	9,  // 23: miragedebug.api.app.AppManagement.CreateApp:output_type -> miragedebug.api.app.App
	9,  // 24: miragedebug.api.app.AppManagement.UpdateApp:output_type -> miragedebug.api.app.App
	9,  // 25: miragedebug.api.app.AppManagement.DeleteApp:output_type -> miragedebug.api.app.App
	9,  // 26: miragedebug.api.app.AppManagement.GetApp:output_type -> miragedebug.api.app.App
	10, // 27: miragedebug.api.app.AppManagement.GetAppStatus:output_type -> miragedebug.api.app.Status
	10, // 28: miragedebug.api.app.AppManagement.InitAppRemote:output_type -> miragedebug.api.app.Status
	13, // 29: miragedebug.api.app.AppManagement.StartDebugging:output_type -> miragedebug.api.app.Empty
	10, // 30: miragedebug.api.app.AppManagement.RollbackApp:output_type -> miragedebug.api.app.Status
	21, // [21:31] is the sub-list for method output_type
	11, // [11:21] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_app_app_proto_init() }
func file_app_app_proto_init() {
	if File_app_app_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_app_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteRuntime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_app_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugToolBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_app_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_app_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_app_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_app_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_app_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_app_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_app_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_app_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_app_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_app_proto_goTypes,
		DependencyIndexes: file_app_app_proto_depIdxs,
		EnumInfos:         file_app_app_proto_enumTypes,
		MessageInfos:      file_app_app_proto_msgTypes,
	}.Build()
	File_app_app_proto = out.File
	file_app_app_proto_rawDesc = nil
	file_app_app_proto_goTypes = nil
	file_app_app_proto_depIdxs = nil
}
