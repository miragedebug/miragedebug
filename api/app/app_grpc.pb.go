// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/app.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppManagementClient is the client API for AppManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppManagementClient interface {
	GetServerInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfo, error)
	ListApps(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AppList, error)
	CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	DeleteApp(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*App, error)
	GetApp(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*App, error)
	GetAppStatus(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*Status, error)
	// InitAppRemote will do the following things:
	//  1. config the workload to ready for debug.
	//     a. change command and args.
	//     b. change the replica to 1 and other things.
	//  2. installing debug tool in container.
	//  3. port-forward the remote debugging port.
	InitAppRemote(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*Status, error)
	// StartDebugging will do the following things:
	// 1. copy the local binary to container.
	// 2. start debug tool in container.
	StartDebugging(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*Empty, error)
	// RollbackApp will rollback the app to the initial config.
	RollbackApp(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*Status, error)
}

type appManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewAppManagementClient(cc grpc.ClientConnInterface) AppManagementClient {
	return &appManagementClient{cc}
}

func (c *appManagementClient) GetServerInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, "/miragedebug.api.app.AppManagement/GetServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagementClient) ListApps(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AppList, error) {
	out := new(AppList)
	err := c.cc.Invoke(ctx, "/miragedebug.api.app.AppManagement/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagementClient) CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, "/miragedebug.api.app.AppManagement/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagementClient) UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, "/miragedebug.api.app.AppManagement/UpdateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagementClient) DeleteApp(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, "/miragedebug.api.app.AppManagement/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagementClient) GetApp(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, "/miragedebug.api.app.AppManagement/GetApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagementClient) GetAppStatus(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/miragedebug.api.app.AppManagement/GetAppStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagementClient) InitAppRemote(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/miragedebug.api.app.AppManagement/InitAppRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagementClient) StartDebugging(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/miragedebug.api.app.AppManagement/StartDebugging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagementClient) RollbackApp(ctx context.Context, in *SingleAppRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/miragedebug.api.app.AppManagement/RollbackApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppManagementServer is the server API for AppManagement service.
// All implementations must embed UnimplementedAppManagementServer
// for forward compatibility
type AppManagementServer interface {
	GetServerInfo(context.Context, *Empty) (*ServerInfo, error)
	ListApps(context.Context, *Empty) (*AppList, error)
	CreateApp(context.Context, *App) (*App, error)
	UpdateApp(context.Context, *App) (*App, error)
	DeleteApp(context.Context, *SingleAppRequest) (*App, error)
	GetApp(context.Context, *SingleAppRequest) (*App, error)
	GetAppStatus(context.Context, *SingleAppRequest) (*Status, error)
	// InitAppRemote will do the following things:
	//  1. config the workload to ready for debug.
	//     a. change command and args.
	//     b. change the replica to 1 and other things.
	//  2. installing debug tool in container.
	//  3. port-forward the remote debugging port.
	InitAppRemote(context.Context, *SingleAppRequest) (*Status, error)
	// StartDebugging will do the following things:
	// 1. copy the local binary to container.
	// 2. start debug tool in container.
	StartDebugging(context.Context, *SingleAppRequest) (*Empty, error)
	// RollbackApp will rollback the app to the initial config.
	RollbackApp(context.Context, *SingleAppRequest) (*Status, error)
	mustEmbedUnimplementedAppManagementServer()
}

// UnimplementedAppManagementServer must be embedded to have forward compatible implementations.
type UnimplementedAppManagementServer struct {
}

func (UnimplementedAppManagementServer) GetServerInfo(context.Context, *Empty) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedAppManagementServer) ListApps(context.Context, *Empty) (*AppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedAppManagementServer) CreateApp(context.Context, *App) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAppManagementServer) UpdateApp(context.Context, *App) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedAppManagementServer) DeleteApp(context.Context, *SingleAppRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedAppManagementServer) GetApp(context.Context, *SingleAppRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedAppManagementServer) GetAppStatus(context.Context, *SingleAppRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppStatus not implemented")
}
func (UnimplementedAppManagementServer) InitAppRemote(context.Context, *SingleAppRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitAppRemote not implemented")
}
func (UnimplementedAppManagementServer) StartDebugging(context.Context, *SingleAppRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDebugging not implemented")
}
func (UnimplementedAppManagementServer) RollbackApp(context.Context, *SingleAppRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackApp not implemented")
}
func (UnimplementedAppManagementServer) mustEmbedUnimplementedAppManagementServer() {}

// UnsafeAppManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppManagementServer will
// result in compilation errors.
type UnsafeAppManagementServer interface {
	mustEmbedUnimplementedAppManagementServer()
}

func RegisterAppManagementServer(s grpc.ServiceRegistrar, srv AppManagementServer) {
	s.RegisterService(&AppManagement_ServiceDesc, srv)
}

func _AppManagement_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagementServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miragedebug.api.app.AppManagement/GetServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagementServer).GetServerInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagement_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagementServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miragedebug.api.app.AppManagement/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagementServer).ListApps(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagement_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagementServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miragedebug.api.app.AppManagement/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagementServer).CreateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagement_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagementServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miragedebug.api.app.AppManagement/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagementServer).UpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagement_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagementServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miragedebug.api.app.AppManagement/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagementServer).DeleteApp(ctx, req.(*SingleAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagement_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagementServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miragedebug.api.app.AppManagement/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagementServer).GetApp(ctx, req.(*SingleAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagement_GetAppStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagementServer).GetAppStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miragedebug.api.app.AppManagement/GetAppStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagementServer).GetAppStatus(ctx, req.(*SingleAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagement_InitAppRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagementServer).InitAppRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miragedebug.api.app.AppManagement/InitAppRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagementServer).InitAppRemote(ctx, req.(*SingleAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagement_StartDebugging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagementServer).StartDebugging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miragedebug.api.app.AppManagement/StartDebugging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagementServer).StartDebugging(ctx, req.(*SingleAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagement_RollbackApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagementServer).RollbackApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miragedebug.api.app.AppManagement/RollbackApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagementServer).RollbackApp(ctx, req.(*SingleAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppManagement_ServiceDesc is the grpc.ServiceDesc for AppManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miragedebug.api.app.AppManagement",
	HandlerType: (*AppManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerInfo",
			Handler:    _AppManagement_GetServerInfo_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _AppManagement_ListApps_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _AppManagement_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppManagement_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppManagement_DeleteApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _AppManagement_GetApp_Handler,
		},
		{
			MethodName: "GetAppStatus",
			Handler:    _AppManagement_GetAppStatus_Handler,
		},
		{
			MethodName: "InitAppRemote",
			Handler:    _AppManagement_InitAppRemote_Handler,
		},
		{
			MethodName: "StartDebugging",
			Handler:    _AppManagement_StartDebugging_Handler,
		},
		{
			MethodName: "RollbackApp",
			Handler:    _AppManagement_RollbackApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/app.proto",
}
